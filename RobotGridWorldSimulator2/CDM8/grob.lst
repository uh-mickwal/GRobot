
CdM-8 Assembler v2.1 <<<grob.asm>>> 07/04/2016 22:16:20

                  1  macro   define/2
                  2          asect $2
                  3  $1:
                  4  mend
                  5  
                  6          define  IOregRB, 0              # robot IO register in IO page
                  7          define  IOregKB, 0xf0           # keyboard IO register in IO page
                  8  
                  9  
                 10          define  right,  0b10000001      # movement commands
                 11          define  left,   0b10000010
                 12          define  forward,        0b10000100
                 13          define  home,           0b10001000
                 14  
                 15  
                 16          asect   0x00
00: d0 ef        17          ldi     r0,0xef
02: c8           18          stsp    r0      # set stack below IO segment
                 19  #
                 20  ############################################################################ MAIN PROGRAM
                 21  
                 22  loop:
03: d3 00        23          ldi r3,IOregRB
05: d6 64        24          jsr getchar
                 25  
                 26          if
07: d1 68        27             ldi r1,"h"
09: 74           28             cmp r1,r0
0a: e1 0f        29          is eq
0c: d1 88        30             ldi r1,home
0e: ad           31             st  r3,r1
                 32          fi
                 33  
                 34          if
0f: d1 6c        35             ldi r1,"l"
11: 74           36             cmp r1,r0
12: e1 17        37          is eq
14: d1 82        38             ldi r1,left
16: ad           39             st  r3,r1
                 40          fi
                 41  
                 42  
                 43          if
17: d1 72        44             ldi r1,"r"
19: 74           45             cmp r1,r0
1a: e1 1f        46          is eq
1c: d1 81        47             ldi r1,right
1e: ad           48             st  r3,r1
                 49          fi
                 50  
                 51          if
1f: d1 66        52             ldi r1,"f"
21: 74           53             cmp r1,r0
22: e1 33        54          is eq
                 55             if
24: bd           56                ld r3, r1
25: d0 04        57                ldi r0, 4
27: 44           58                and r1,r0
28: e1 2f        59             is z                 #Â the way forward is clear
2a: d1 84        60                  ldi r1,forward
2c: ad           61                  st  r3,r1
2d: ee 33        62             else
2f: d0 35        63                ldi r0,msg1
31: d6 80        64                jsr println
                 65             fi
                 66          fi
33: ee 03        67  br loop
                 68  
                 69  
35: 53 69 72 2c  70  msg1:   dc      "Sir, can't move forward, Sir! we are blocked!",0x0d,0
39: 20 63 61 6e     
3d: 27 74 20 6d     
41: 6f 76 65 20     
45: 66 6f 72 77     
49: 61 72 64 2c     
4d: 20 53 69 72     
51: 21 20 77 65     
55: 20 61 72 65     
59: 20 62 6c 6f     
5d: 63 6b 65 64     
61: 21 0d 00        
                 71  ############################ getchar() #####################################
                 72  ############################################################################
                 73  
                 74  getchar:                # get next character in r0, quict if 'q'
64: c1           75     save r1
65: c2           76     save r2
66: d0 f0        77          ldi  r0, IOregKB
                 78  
                 79          do              # loop until keyboard ready
68: b1           80            ld  r0,r1
69: 05           81            tst r1
6a: e5 68        82          until mi
                 83  
6c: 8c           84          inc  r0         # r0->IOregKB_data
6d: b1           85          ld   r0,r1      # ascii from keyboard to r1
                 86  
                 87          if
6e: d2 71        88             ldi r2,"q"
70: 76           89             cmp r1,r2
71: e1 74        90          is eq
73: d4           91             halt
                 92          fi
                 93  
74: 8c           94          inc  r0         # r0->screen data
75: a1           95          st   r0,r1      # r1 to screen -- echo
                 96  
76: 04           97     move r1,r0           # return ASCII in r0
                 98  
77: c6           99     restore
78: c5          100     restore
79: d7          101     rts
                102  
                103  ############################ printc() #####################################
                104  ###########################################################################
                105  printc:                 # print char in r0 on screen
7a: c1          106  save r1
7b: d1 f1       107                  ldi r1,IOregKB+1        # monitor
7d: a4          108                  st r1,r0
7e: c5          109  restore
7f: d7          110  rts
                111  
                112  
                113  ############################ println() #####################################
                114  ############################################################################
                115  println:                # print a NULL-terminated string pointed to by r0
80: c1          116  save r1
81: 01          117          move r0,r1
                118          while
82: f4          119             ldc r1,r0
83: 00          120             tst r0
84: e0 8a       121          stays nz
86: d6 7a       122             jsr printc
88: ee 82       123          wend
8a: c5          124  restore
8b: d7          125  rts
                126  
                127  
                128  
                129  
                130  
                131  
                132  
                133  
                134  
                135  
                136  end

======================================================================

SECTIONS:
Name	Size	Relocation offsets


ENTRIES:
Section		Name/Offset

$abs		<NONE>

EXTERNALS:
Name		Used in


======================================================================
